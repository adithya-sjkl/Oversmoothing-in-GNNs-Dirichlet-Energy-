{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMXEfICYtqrIi3UmAA2txQC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"V1Q0bt8-yBSZ"},"outputs":[],"source":["import torch\n","import torch_geometric\n","from torch_geometric.utils import add_self_loops\n","from torch_geometric.utils import to_dense_adj\n","\n","def change_nonzero_to_one(tensor):\n","    # Create a mask for nonzero elements\n","    mask = tensor != 0\n","    # Change nonzero elements to 1 using the mask\n","    tensor[mask] = 1\n","    return tensor\n","\n","\n","def dirichlet_energy(activations, edge_index, num_nodes):\n","    \"\"\"\n","    Calculates the Dirichlet energy of the hidden layer activations in a GNN.\n","\n","    Args:\n","        activations (torch.Tensor): A matrix of size (num_nodes, hidden_dim) containing the hidden layer activations.\n","        edge_index (torch.Tensor): The edge index of the graph.\n","        num_nodes (int): The number of nodes in the graph.\n","\n","    Returns:\n","        torch.Tensor: The Dirichlet energy of the hidden layer activations.\n","    \"\"\"\n","    edge_index_sl,_  = add_self_loops(edge_index, num_nodes=num_nodes)\n","    adj = to_dense_adj(edge_index_sl , max_num_nodes=num_nodes)\n","    adj = change_nonzero_to_one(adj) # sometimes we get values other than 1 due to duplication\n","    adj = adj.squeeze()\n","    degree_matrix_root = torch.diag(torch.sqrt(adj.sum(dim=1)).squeeze())\n","    deg = torch.linalg.inv(degree_matrix_root)\n","\n","    laplacian = torch.eye(num_nodes) - deg @ adj @ deg\n","\n","    dirichlet_energy = torch.trace( activations.t() @ laplacian @ activations )\n","\n","\n","    return dirichlet_energy"]}]}